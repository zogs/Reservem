<?php

namespace Proxies\__CG__\Zogs\WorldBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Location extends \Zogs\WorldBundle\Entity\Location implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'country', 'region', 'departement', 'district', 'division', 'city', 'city_id', 'city_name');
        }

        return array('__isInitialized__', 'id', 'country', 'region', 'departement', 'district', 'division', 'city', 'city_id', 'city_name');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Location $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function exist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'exist', array());

        return parent::exist();
    }

    /**
     * {@inheritDoc}
     */
    public function isNull()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isNull', array());

        return parent::isNull();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', array($country));

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', array());

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryCode', array());

        return parent::getCountryCode();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountryId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountryId', array());

        return parent::getCountryId();
    }

    /**
     * {@inheritDoc}
     */
    public function hasCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCountry', array());

        return parent::hasCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegion($region)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegion', array($region));

        return parent::setRegion($region);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegionId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegionId', array());

        return parent::getRegionId();
    }

    /**
     * {@inheritDoc}
     */
    public function getRegion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegion', array());

        return parent::getRegion();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRegion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRegion', array());

        return parent::hasRegion();
    }

    /**
     * {@inheritDoc}
     */
    public function setDepartement($departement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDepartement', array($departement));

        return parent::setDepartement($departement);
    }

    /**
     * {@inheritDoc}
     */
    public function getDepartement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepartement', array());

        return parent::getDepartement();
    }

    /**
     * {@inheritDoc}
     */
    public function getDepartementId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepartementId', array());

        return parent::getDepartementId();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDepartement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDepartement', array());

        return parent::hasDepartement();
    }

    /**
     * {@inheritDoc}
     */
    public function setDistrict($district)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDistrict', array($district));

        return parent::setDistrict($district);
    }

    /**
     * {@inheritDoc}
     */
    public function getDistrict()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDistrict', array());

        return parent::getDistrict();
    }

    /**
     * {@inheritDoc}
     */
    public function getDistrictId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDistrictId', array());

        return parent::getDistrictId();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDistrict()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDistrict', array());

        return parent::hasDistrict();
    }

    /**
     * {@inheritDoc}
     */
    public function setDivision($division)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDivision', array($division));

        return parent::setDivision($division);
    }

    /**
     * {@inheritDoc}
     */
    public function getDivision()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDivision', array());

        return parent::getDivision();
    }

    /**
     * {@inheritDoc}
     */
    public function getDivisionId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDivisionId', array());

        return parent::getDivisionId();
    }

    /**
     * {@inheritDoc}
     */
    public function hasDivision()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasDivision', array());

        return parent::hasDivision();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity($city)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCity', array($city));

        return parent::setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function hasCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasCity', array());

        return parent::hasCity();
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', array());

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function getCityId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCityId', array());

        return parent::getCityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCityId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCityId', array());

        return parent::setCityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCityName', array());

        return parent::setCityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getCityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCityName', array());

        return parent::getCityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getLastState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastState', array());

        return parent::getLastState();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllRegions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllRegions', array());

        return parent::getAllRegions();
    }

}
