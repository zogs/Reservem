<?php

namespace Proxies\__CG__\Crc\ReservBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Department extends \Crc\ReservBundle\Entity\Department implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'name', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'acronyme', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'description', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'address', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'logo', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'admins', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'members', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'devices');
        }

        return array('__isInitialized__', 'id', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'name', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'acronyme', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'description', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'address', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'logo', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'admins', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'members', '' . "\0" . 'Crc\\ReservBundle\\Entity\\Department' . "\0" . 'devices');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Department $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcronyme($acronyme)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcronyme', array($acronyme));

        return parent::setAcronyme($acronyme);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcronyme()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcronyme', array());

        return parent::getAcronyme();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', array($address));

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', array());

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogo(\Zogs\UtilsBundle\Entity\Image $logo = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogo', array($logo));

        return parent::setLogo($logo);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogo', array());

        return parent::getLogo();
    }

    /**
     * {@inheritDoc}
     */
    public function addAdmin(\Zogs\UserBundle\Entity\User $admins)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAdmin', array($admins));

        return parent::addAdmin($admins);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAdmin(\Zogs\UserBundle\Entity\User $admins)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAdmin', array($admins));

        return parent::removeAdmin($admins);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdmins()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdmins', array());

        return parent::getAdmins();
    }

    /**
     * {@inheritDoc}
     */
    public function isAdmin(\Zogs\UserBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAdmin', array($user));

        return parent::isAdmin($user);
    }

    /**
     * {@inheritDoc}
     */
    public function addMember(\Zogs\UserBundle\Entity\User $members)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMember', array($members));

        return parent::addMember($members);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMember(\Zogs\UserBundle\Entity\User $members)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMember', array($members));

        return parent::removeMember($members);
    }

    /**
     * {@inheritDoc}
     */
    public function getMembers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMembers', array());

        return parent::getMembers();
    }

    /**
     * {@inheritDoc}
     */
    public function isMember(\Zogs\UserBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isMember', array($user));

        return parent::isMember($user);
    }

}
